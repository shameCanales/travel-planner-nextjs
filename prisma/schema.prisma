datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = "../app/generated/prisma/client"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  trips         Trip[] // one-to-many relationship with Trip model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Trip {
  id          String      @id @default(cuid()) // cuid is a function that generates a unique identifier
  title       String
  description String
  imageUrl    String?     // Optional field for an image URL
  startDate   DateTime
  endDate     DateTime
  user        User        @relation(fields: [userId], references: [id]) //creating a relation with the User model. where userId is the foreign key
  userId      String
  locations   Location[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Location {
  id        String   @id @default(cuid())
  location  String
  lat       Float
  lng       Float
  trip      Trip     @relation(fields: [tripId], references: [id])
  tripId    String
  order     Int      @default(0)
  createdAt DateTime @default(now())
}